using System;
using System.Collections.Generic;
using System.Data;
using ESC2.Library.Data.Constants;
using ESC2.Library.Data.Repos;
using ESC2.Library.Data.Helpers;
using ESC2.Library.Data.Interfaces;
using ESC2.Library.Data.Objects;

// This file is generated from the database.  Do not manually edit.
// Generated by: https://github.com/brian-nelson/repo-generator
// To extend the class beyond a POCO, create a additional partial class
// named LogDailyFactRepo.cs
namespace ESC2.Module.System.Data.Repos.Warehouse
{
    public partial class LogDailyFactRepo : AbstractDataRepo<ESC2.Module.System.Data.DataObjects.Warehouse.LogDailyFact, Int64>
    {
        public LogDailyFactRepo(IDataProvider dataProvider)
             : base(dataProvider)
        {
        }

        public override string SchemaName => "warehouse";
        public override string TableName => "log_daily_fact";

        public override string InsertSql => @"
            INSERT INTO [warehouse].[log_daily_fact] (
                [warehouse].[log_daily_fact].[asset_id],
                [warehouse].[log_daily_fact].[day_period_id],
                [warehouse].[log_daily_fact].[log_severity_id],
                [warehouse].[log_daily_fact].[log_source_id],
                [warehouse].[log_daily_fact].[count])
            VALUES ( 
                @AssetId,
                @DayPeriodId,
                @LogSeverityId,
                @LogSourceId,
                @Count) ";

        public override string UpdateSql => @"
            UPDATE [warehouse].[log_daily_fact] 
            SET [warehouse].[log_daily_fact].[asset_id]=@AssetId,
                [warehouse].[log_daily_fact].[day_period_id]=@DayPeriodId,
                [warehouse].[log_daily_fact].[log_severity_id]=@LogSeverityId,
                [warehouse].[log_daily_fact].[log_source_id]=@LogSourceId,
                [warehouse].[log_daily_fact].[count]=@Count
            WHERE [warehouse].[log_daily_fact].[log_daily_fact_id]=@Id ";

        public override string SelectSql => @"
            SELECT [warehouse].[log_daily_fact].[log_daily_fact_id],
                   [warehouse].[log_daily_fact].[asset_id],
                   [warehouse].[log_daily_fact].[day_period_id],
                   [warehouse].[log_daily_fact].[log_severity_id],
                   [warehouse].[log_daily_fact].[log_source_id],
                   [warehouse].[log_daily_fact].[count]
            FROM [warehouse].[log_daily_fact] ";

        public override string DeleteSql => @"DELETE FROM [warehouse].[log_daily_fact] WHERE [warehouse].[log_daily_fact].[log_daily_fact_id] = @Id";

        public override string GetByIdSql => $@"{SelectSql} WHERE [warehouse].[log_daily_fact].[log_daily_fact_id = @Id";
        public override ESC2.Module.System.Data.DataObjects.Warehouse.LogDailyFact ToObject(DataRow row)
        {
            var obj = new ESC2.Module.System.Data.DataObjects.Warehouse.LogDailyFact();
            obj.Id = row.GetLong("log_daily_fact_id");
            obj.AssetId = row.GetGuid("asset_id");
            obj.DayPeriodId = row.GetInt("day_period_id");
            obj.LogSeverityId = row.GetByte("log_severity_id");
            obj.LogSourceId = row.GetShort("log_source_id");
            obj.Count = row.GetLong("count");
            return obj;
        }

        public override List<DbQueryParameter> ToParameters(ESC2.Module.System.Data.DataObjects.Warehouse.LogDailyFact obj)
        {
            List<DbQueryParameter> parameters = new List<DbQueryParameter>();
            parameters.Add(new DbQueryParameter("Id", obj.Id, DbQueryParameterType.Guid));
            parameters.Add(new DbQueryParameter("AssetId", obj.AssetId, DbQueryParameterType.Guid));
            parameters.Add(new DbQueryParameter("DayPeriodId", obj.DayPeriodId, DbQueryParameterType.Int32));
            parameters.Add(new DbQueryParameter("LogSeverityId", obj.LogSeverityId, DbQueryParameterType.Byte));
            parameters.Add(new DbQueryParameter("LogSourceId", obj.LogSourceId, DbQueryParameterType.Int16));
            parameters.Add(new DbQueryParameter("Count", obj.Count, DbQueryParameterType.Int64));

            return parameters;
        }
    }
}
