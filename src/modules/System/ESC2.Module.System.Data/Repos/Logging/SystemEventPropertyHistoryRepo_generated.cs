using System;
using System.Collections.Generic;
using System.Data;
using ESC2.Library.Data.Constants;
using ESC2.Library.Data.Repos;
using ESC2.Library.Data.Helpers;
using ESC2.Library.Data.Interfaces;
using ESC2.Library.Data.Objects;

// This file is generated from the database.  Do not manually edit.
// Generated by: https://github.com/brian-nelson/repo-generator
// To extend the class beyond a POCO, create a additional partial class
// named SystemEventPropertyHistoryRepo.cs
namespace ESC2.Module.System.Data.Repos.Logging
{
    public partial class SystemEventPropertyHistoryRepo : AbstractDataRepo<ESC2.Module.System.Data.DataObjects.Logging.SystemEventPropertyHistory, Int64>
    {
        public SystemEventPropertyHistoryRepo(IDataProvider dataProvider)
             : base(dataProvider)
        {
        }

        public override string SchemaName => "logging";
        public override string TableName => "system_event_property_history";

        public override string InsertSql => @"
            INSERT INTO [logging].[system_event_property_history] (
                [logging].[system_event_property_history].[system_event_property_history_id],
                [logging].[system_event_property_history].[system_event_history_id],
                [logging].[system_event_property_history].[parameter_name],
                [logging].[system_event_property_history].[parameter_value])
            VALUES ( 
                @Id,
                @SystemEventHistoryId,
                @ParameterName,
                @ParameterValue) ";

        public override string UpdateSql => @"
            UPDATE [logging].[system_event_property_history] 
            SET [logging].[system_event_property_history].[system_event_history_id]=@SystemEventHistoryId,
                [logging].[system_event_property_history].[parameter_name]=@ParameterName,
                [logging].[system_event_property_history].[parameter_value]=@ParameterValue
            WHERE [logging].[system_event_property_history].[system_event_property_history_id]=@Id ";

        public override string SelectSql => @"
            SELECT [logging].[system_event_property_history].[system_event_property_history_id],
                   [logging].[system_event_property_history].[system_event_history_id],
                   [logging].[system_event_property_history].[parameter_name],
                   [logging].[system_event_property_history].[parameter_value]
            FROM [logging].[system_event_property_history] ";

        public override string DeleteSql => @"DELETE FROM [logging].[system_event_property_history] WHERE [logging].[system_event_property_history].[system_event_property_history_id] = @Id";

        public override string GetByIdSql => $@"{SelectSql} WHERE [logging].[system_event_property_history].[system_event_property_history_id = @Id";
        public override ESC2.Module.System.Data.DataObjects.Logging.SystemEventPropertyHistory ToObject(DataRow row)
        {
            var obj = new ESC2.Module.System.Data.DataObjects.Logging.SystemEventPropertyHistory();
            obj.Id = row.GetLong("system_event_property_history_id");
            obj.SystemEventHistoryId = row.GetNullableLong("system_event_history_id");
            obj.ParameterName = row.GetString("parameter_name");
            obj.ParameterValue = row.GetString("parameter_value");
            return obj;
        }

        public override List<DbQueryParameter> ToParameters(ESC2.Module.System.Data.DataObjects.Logging.SystemEventPropertyHistory obj)
        {
            List<DbQueryParameter> parameters = new List<DbQueryParameter>();
            parameters.Add(new DbQueryParameter("Id", obj.Id, DbQueryParameterType.Guid));
            parameters.Add(new DbQueryParameter("SystemEventHistoryId", obj.SystemEventHistoryId, DbQueryParameterType.Int64));
            parameters.Add(new DbQueryParameter("ParameterName", obj.ParameterName, DbQueryParameterType.String));
            parameters.Add(new DbQueryParameter("ParameterValue", obj.ParameterValue, DbQueryParameterType.String));

            return parameters;
        }
    }
}
